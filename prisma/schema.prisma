// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id             String           @id @default(cuid())
  name           String
  slug           String           @unique
  currency       String           @default("MXN")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  theme          Theme?
  domainMappings DomainMapping[]
  locations      Location[]
  categories     Category[]
  products       Product[]
  modifierGroups ModifierGroup[]
  orders         Order[]

  @@map("Business")
}

model Theme {
  id         String   @id @default(cuid())
  primary    String   @default("#111827")
  accent     String   @default("#22C55E")
  text       String   @default("#0B1020")
  businessId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("Theme")
}

model DomainMapping {
  id         String   @id @default(cuid())
  domain     String   @unique
  primary    Boolean  @default(false)
  businessId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("DomainMapping")
}

model Location {
  id          String        @id @default(cuid())
  name        String
  address     String
  businessId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  business      Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  parkingSpots  ParkingSpot[]

  @@map("Location")
}

model ParkingSpot {
  id         String   @id @default(cuid())
  code       String
  qrSlug     String   @unique
  locationId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  orders   Order[]

  @@map("ParkingSpot")
}

model Category {
  id         String    @id @default(cuid())
  name       String
  businessId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  business  Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  products  Product[]

  @@map("Category")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Decimal   @db.Decimal(10, 2)
  imageUrl    String?
  categoryId  String
  businessId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  category      Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  business      Business              @relation(fields: [businessId], references: [id], onDelete: Cascade)
  modifierGroups ProductModifierGroup[]
  orderItems    OrderItem[]

  @@map("Product")
}

model ModifierGroup {
  id         String    @id @default(cuid())
  name       String
  required   Boolean   @default(false)
  maxChoices Int       @default(1)
  businessId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  business      Business              @relation(fields: [businessId], references: [id], onDelete: Cascade)
  options       ModifierOption[]
  products      ProductModifierGroup[]

  @@map("ModifierGroup")
}

model ModifierOption {
  id             String       @id @default(cuid())
  name           String
  price          Decimal      @db.Decimal(10, 2) @default(0)
  modifierGroupId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  modifierGroup ModifierGroup @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  orderItemModifiers OrderItemModifier[]

  @@map("ModifierOption")
}

model ProductModifierGroup {
  id              String       @id @default(cuid())
  productId       String
  modifierGroupId String
  createdAt       DateTime     @default(now())

  // Relations
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  modifierGroup ModifierGroup @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)

  @@unique([productId, modifierGroupId])
  @@map("ProductModifierGroup")
}

model Order {
  id             String      @id @default(cuid())
  orderNumber    String      @unique
  status         String      @default("pending") // pending, preparing, ready, completed, cancelled
  total          Decimal     @db.Decimal(10, 2)
  parkingSpotId  String
  businessId     String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  parkingSpot ParkingSpot @relation(fields: [parkingSpotId], references: [id])
  business    Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@map("Order")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  orderId   String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  modifiers OrderItemModifier[]

  @@map("OrderItem")
}

model OrderItemModifier {
  id              String        @id @default(cuid())
  orderItemId     String
  modifierOptionId String
  createdAt       DateTime      @default(now())

  // Relations
  orderItem      OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  modifierOption ModifierOption @relation(fields: [modifierOptionId], references: [id])

  @@unique([orderItemId, modifierOptionId])
  @@map("OrderItemModifier")
}
