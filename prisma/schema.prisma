// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Business {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  currency  String   @default("MXN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  theme             Theme?
  domainMappings   DomainMapping[]
  categories       Category[]
  products         Product[]
  modifierGroups   ModifierGroup[]
  locations        Location[]
  orders           Order[]

  @@map("businesses")
}

model Theme {
  id         String @id @default(cuid())
  primary    String
  accent     String
  text       String
  businessId String @unique
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("themes")
}

model DomainMapping {
  id         String @id @default(cuid())
  domain     String @unique
  businessId String
  primary    Boolean @default(false)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("domain_mappings")
}

model Location {
  id         String @id @default(cuid())
  name       String
  address    String
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  parkingSpots ParkingSpot[]
  orders       Order[]

  @@map("locations")
}

model ParkingSpot {
  id         String @id @default(cuid())
  code       String
  qrSlug     String @unique
  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("parking_spots")
}

model Category {
  id         String @id @default(cuid())
  name       String
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  categoryId  String
  businessId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  modifierGroups ProductModifierGroup[]
  orderItems     OrderItem[]

  @@map("products")
}

model ModifierGroup {
  id            String @id @default(cuid())
  name          String
  required      Boolean @default(false)
  maxSelections Int     @default(1)
  businessId    String
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  options           ModifierOption[]
  productModifierGroups ProductModifierGroup[]

  @@map("modifier_groups")
}

model ModifierOption {
  id              String @id @default(cuid())
  name            String
  price           Float  @default(0)
  modifierGroupId String
  modifierGroup   ModifierGroup @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  orderItemModifiers OrderItemModifier[]

  @@map("modifier_options")
}

model ProductModifierGroup {
  id              String @id @default(cuid())
  productId       String
  modifierGroupId String
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  modifierGroup   ModifierGroup @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([productId, modifierGroupId])
  @@map("product_modifier_groups")
}

model Order {
  id            String   @id @default(cuid())
  orderNumber   String   @unique
  status        String   @default("pending") // pending, preparing, ready, completed, cancelled
  total         Float
  parkingSpotId String
  locationId    String
  businessId    String
  parkingSpot   ParkingSpot @relation(fields: [parkingSpotId], references: [id])
  location      Location @relation(fields: [locationId], references: [id])
  business      Business @relation(fields: [businessId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  modifiers OrderItemModifier[]

  @@map("order_items")
}

model OrderItemModifier {
  id                String @id @default(cuid())
  orderItemId       String
  modifierOptionId  String
  orderItem         OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  modifierOption    ModifierOption @relation(fields: [modifierOptionId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("order_item_modifiers")
}
